/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	// // jQuery
	// require('./jquery.min.js');
	// // Angular modules
	// require('./angular.min.js');
	// require('./angular-route.min.js');
	// // Firebase modules
	// require('./firebase.js')
	// require('./angularfire.js');
	// // Bootstrap module
	// require('./bootstrap.min.js');
	// // App modules
	// require('./app-config.js');
	// require('./app-routes.js');
	// require('./app-ctrl.js');
	// require('./app-service.js');
	// Clipboard module
	//require('./clipboard.min.js');
	
	$(function() {
	    var header = $("header.hero"),
	        docsContainer = $("#docs article");
	    // Alert widget
	    function sideAlert(msg) {
	        console.log('sideAlert' + msg);
	    }
	    // Fullscreen search on focus
	    $("#search").focusin(function() {
	        $(".header-tools").addClass("full-screen");
	        header.addClass('collapse');
	    }).focusout(function() {
	        $(".header-tools").removeClass("full-screen");
	        header.removeClass('collapse');
	    });
	    // tools function
	    $("#docsGridview").on('click', function() {
	        docsContainer.addClass('col-md-6').removeClass('col-md-12');
	    });
	    // Aside sticky panel
	    $('aside section').affix({
	        offset: {
	            top: $('aside').offset().top
	        }
	    });
	    // Tooltips
	    $('[data-toggle="tooltip"]').tooltip();
	    // Capture 's' key to focus search input
	    firstTime = false;
	    $(window).on('keydown', function(e) {
	        switch (e.keyCode) {
	            case 83:
	                if (!firstTime) {
	                    e.preventDefault();
	                    $("#search").focus();
	                    firstTime = true;
	                }
	                break;
	            case 27:
	                $("#search").val(null).blur();
	                break;
	            default:
	        }
	    });
	
	    // Clipboard copy handlers
	    $('.copy-code').on('click', function() {
	        sideAlert('Code copied to clipboard');
	    });
	    $('.copy-permalink').on('click', function() {
	        sideAlert('Link copied to clipboard');
	    });
	    new Clipboard('.copy-code');
	    new Clipboard('.copy-permalink');
	});


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTA5ZjIwYmJjY2Q2NTFlZDBjZjQiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NjcmlwdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0EsRUFBQyIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgNTA5ZjIwYmJjY2Q2NTFlZDBjZjRcbiAqKi8iLCIvLyAvLyBqUXVlcnlcbi8vIHJlcXVpcmUoJy4vanF1ZXJ5Lm1pbi5qcycpO1xuLy8gLy8gQW5ndWxhciBtb2R1bGVzXG4vLyByZXF1aXJlKCcuL2FuZ3VsYXIubWluLmpzJyk7XG4vLyByZXF1aXJlKCcuL2FuZ3VsYXItcm91dGUubWluLmpzJyk7XG4vLyAvLyBGaXJlYmFzZSBtb2R1bGVzXG4vLyByZXF1aXJlKCcuL2ZpcmViYXNlLmpzJylcbi8vIHJlcXVpcmUoJy4vYW5ndWxhcmZpcmUuanMnKTtcbi8vIC8vIEJvb3RzdHJhcCBtb2R1bGVcbi8vIHJlcXVpcmUoJy4vYm9vdHN0cmFwLm1pbi5qcycpO1xuLy8gLy8gQXBwIG1vZHVsZXNcbi8vIHJlcXVpcmUoJy4vYXBwLWNvbmZpZy5qcycpO1xuLy8gcmVxdWlyZSgnLi9hcHAtcm91dGVzLmpzJyk7XG4vLyByZXF1aXJlKCcuL2FwcC1jdHJsLmpzJyk7XG4vLyByZXF1aXJlKCcuL2FwcC1zZXJ2aWNlLmpzJyk7XG4vLyBDbGlwYm9hcmQgbW9kdWxlXG4vL3JlcXVpcmUoJy4vY2xpcGJvYXJkLm1pbi5qcycpO1xuXG4kKGZ1bmN0aW9uKCkge1xuICAgIHZhciBoZWFkZXIgPSAkKFwiaGVhZGVyLmhlcm9cIiksXG4gICAgICAgIGRvY3NDb250YWluZXIgPSAkKFwiI2RvY3MgYXJ0aWNsZVwiKTtcbiAgICAvLyBBbGVydCB3aWRnZXRcbiAgICBmdW5jdGlvbiBzaWRlQWxlcnQobXNnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzaWRlQWxlcnQnICsgbXNnKTtcbiAgICB9XG4gICAgLy8gRnVsbHNjcmVlbiBzZWFyY2ggb24gZm9jdXNcbiAgICAkKFwiI3NlYXJjaFwiKS5mb2N1c2luKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKFwiLmhlYWRlci10b29sc1wiKS5hZGRDbGFzcyhcImZ1bGwtc2NyZWVuXCIpO1xuICAgICAgICBoZWFkZXIuYWRkQ2xhc3MoJ2NvbGxhcHNlJyk7XG4gICAgfSkuZm9jdXNvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICQoXCIuaGVhZGVyLXRvb2xzXCIpLnJlbW92ZUNsYXNzKFwiZnVsbC1zY3JlZW5cIik7XG4gICAgICAgIGhlYWRlci5yZW1vdmVDbGFzcygnY29sbGFwc2UnKTtcbiAgICB9KTtcbiAgICAvLyB0b29scyBmdW5jdGlvblxuICAgICQoXCIjZG9jc0dyaWR2aWV3XCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBkb2NzQ29udGFpbmVyLmFkZENsYXNzKCdjb2wtbWQtNicpLnJlbW92ZUNsYXNzKCdjb2wtbWQtMTInKTtcbiAgICB9KTtcbiAgICAvLyBBc2lkZSBzdGlja3kgcGFuZWxcbiAgICAkKCdhc2lkZSBzZWN0aW9uJykuYWZmaXgoe1xuICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgIHRvcDogJCgnYXNpZGUnKS5vZmZzZXQoKS50b3BcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIFRvb2x0aXBzXG4gICAgJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcbiAgICAvLyBDYXB0dXJlICdzJyBrZXkgdG8gZm9jdXMgc2VhcmNoIGlucHV0XG4gICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgJCh3aW5kb3cpLm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICAgICAgY2FzZSA4MzpcbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjc2VhcmNoXCIpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0VGltZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICAkKFwiI3NlYXJjaFwiKS52YWwobnVsbCkuYmx1cigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ2xpcGJvYXJkIGNvcHkgaGFuZGxlcnNcbiAgICAkKCcuY29weS1jb2RlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNpZGVBbGVydCgnQ29kZSBjb3BpZWQgdG8gY2xpcGJvYXJkJyk7XG4gICAgfSk7XG4gICAgJCgnLmNvcHktcGVybWFsaW5rJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNpZGVBbGVydCgnTGluayBjb3BpZWQgdG8gY2xpcGJvYXJkJyk7XG4gICAgfSk7XG4gICAgbmV3IENsaXBib2FyZCgnLmNvcHktY29kZScpO1xuICAgIG5ldyBDbGlwYm9hcmQoJy5jb3B5LXBlcm1hbGluaycpO1xufSk7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vYXBwL3NjcmlwdHMuanNcbiAqKiBtb2R1bGUgaWQgPSAwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9